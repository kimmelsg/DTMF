{"version":3,"sources":["styles.js","Dialpad.js","App.js","serviceWorker.js","index.js"],"names":["Pad","styled","div","_templateObject","Button","button","_templateObject2","Subtext","_templateObject3","NUMBER_PAD","DialPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","number","e","preventDefault","player","play","target","onClick","setTimeout","blur","DTMF","_this2","react_default","a","createElement","map","_ref","_ref2","slicedToArray","subtext","key","name","React","Component","App","className","Dialpad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"g5CAEO,IAAMA,EAAMC,IAAOC,IAAVC,KAUHC,EAASH,IAAOI,OAAVC,KAiCNC,EAAUN,IAAOC,IAAVM,KCzCdC,EAAa,CACjB,CAAC,EAAG,IACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,QACJ,CAAC,EAAG,OACJ,CAAC,EAAG,QACJ,CAAC,IAAK,IACN,CAAC,EAAG,IACJ,CAAC,IAAK,KA+BOC,cA3Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAIRQ,YAAc,SAAAC,GAAM,OAAI,SAAAC,GACtBA,EAAEC,iBACFV,EAAKW,OAAOC,KAAKJ,GACjB,IAAIK,EAASJ,EAAEI,OACfb,EAAKD,MAAMe,QAAQN,GACnBO,WAAW,kBAAMF,EAAOG,QAAQ,OARhChB,EAAKW,OAAS,IAAIM,IAFDjB,wEAaV,IAAAkB,EAAAf,KACP,OACEgB,EAAAC,EAAAC,cAACjC,EAAD,KACGS,EAAWyB,IAAI,SAAAC,GAAA,IAAAC,EAAAvB,OAAAwB,EAAA,EAAAxB,CAAAsB,EAAA,GAAEf,EAAFgB,EAAA,GAAUE,EAAVF,EAAA,UACdL,EAAAC,EAAAC,cAAC7B,EAAD,CAAUmC,IAAKnB,EAAQM,QAASI,EAAKX,YAAYC,GAASoB,KAAMpB,GAC7DA,EACDW,EAAAC,EAAAC,cAAC1B,EAAD,KAAY+B,GAAW,gBApBbG,IAAMC,WCHbC,mLAVX,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,UAAQW,UAAU,cAChBb,EAAAC,EAAAC,cAACY,EAAD,CAASnB,QAAS,kBAAM,iBALhBgB,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2767da7c.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Pad = styled.div`\n  background-color: #fff;\n  display: grid;\n  grid-template-rows: 1fr 1fr 1fr 1fr;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-row-gap: 4px;\n  grid-column-gap: 4px;\n  max-width: 180px;\n`;\n\nexport const Button = styled.button`\n  background-color: #fff;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: none;\n  line-height: normal;\n  font-size: 22px;\n  margin: 0;\n  cursor: pointer;\n  position: relative;\n  transition: all 0.4s ease-in;\n  &:before {\n    content: \"\";\n    background-color: #c0c0c0;\n    border-radius: 10%;\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    transform: scale(0.001, 0.001);\n  }\n  &:focus {\n    outline: 0;\n    color: #2f3941;\n    &:before {\n      animation: press_effect 0.8s ease-out;\n    }\n  }\n`;\n\nexport const Subtext = styled.div`\n  color: #737373;\n  margin-top: 2px;\n  font-size: 8px;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n`;\n","import React from 'react';\nimport DTMF from '@kimmel/dtmf';\nimport * as S from './styles';\n\nconst NUMBER_PAD = [\n  [1, ''],\n  [2, 'ABC'],\n  [3, 'DEF'],\n  [4, 'GHI'],\n  [5, 'JKL'],\n  [6, 'MNO'],\n  [7, 'PQRS'],\n  [8, 'TUV'],\n  [9, 'WXYZ'],\n  ['*', ''],\n  [0, ''],\n  ['#', ''],\n];\n\nclass DialPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.player = new DTMF();\n  }\n\n  handleClick = number => e => {\n    e.preventDefault();\n    this.player.play(number);\n    let target = e.target;\n    this.props.onClick(number);\n    setTimeout(() => target.blur(), 300);\n  };\n\n  render() {\n    return (\n      <S.Pad>\n        {NUMBER_PAD.map(([number, subtext]) => (\n          <S.Button key={number} onClick={this.handleClick(number)} name={number}>\n            {number}\n            <S.Subtext>{subtext || ' '}</S.Subtext>\n          </S.Button>\n        ))}\n      </S.Pad>\n    );\n  }\n}\n\nexport default DialPad;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Dialpad from \"./Dialpad\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Dialpad onClick={() => null} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}